plugins {
    id 'application'
}

configurations {
    docker
}

dependencies {
    implementation 'org.slf4j:slf4j-simple:1.8.0-beta4'
    implementation 'org.apache.tomcat:tomcat-jdbc:9.0.41'
    implementation "io.javalin:javalin:$JAVALIN_VERSION"
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.1'
    implementation (project(':cwms_radar_api'))
    implementation 'com.oracle.ojdbc:ojdbc8:19.3.0.0'

    implementation ("io.javalin:javalin-openapi:$JAVALIN_VERSION"){
        exclude group: 'org.webjars', module: 'swagger-ui'
    }

    implementation 'io.swagger.core.v3:swagger-core:2.0.9'
    implementation 'io.swagger.core.v3:swagger-annotations:2.0.9'
    implementation 'org.webjars:swagger-ui:3.24.3'
    implementation 'org.slf4j:slf4j-simple:1.7.28'
    implementation "io.dropwizard.metrics:metrics-core:$dropwizard_version"
    implementation "io.dropwizard.metrics:metrics-servlets:$dropwizard_version"
    implementation "com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:$OWASP_SANITIZER_VERSION"


    testImplementation "io.javalin:javalin:$JAVALIN_VERSION"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    testImplementation 'com.sun.xml.bind:jaxb-impl:2.3.4'
    testImplementation "org.mockito:mockito-core:3.2.4"
    testImplementation "io.rest-assured:rest-assured:4.4.0"
    testImplementation( "mil.army.usace.hec:cwms-db-jooq:6.0.2"){
        exclude group: "com.oracle", module: "*"
        exclude group: "com.oracle.database.jdbc", module: "*"
        exclude group: "org.jooq.pro", module: "*"
    }
    testImplementation('org.jooq.pro:jooq:3.11.2'){
        exclude group: "com.oracle", module: "*"
        exclude group: "com.oracle.database.jdbc", module: "*"
        exclude group: "javax.xml.bind", module: "*"
    }

    implementation 'com.github.kmehrunes:javalin-jwt:0.3'

}

application {
    mainClass = "mil.army.usace.hec.RadarAPI"
}

jar {
    manifest {
        attributes 'Main-Class': application.mainClass
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}


run {
    debugOptions {
       enabled = true
       port = 5566
       server = true
       suspend = false
   }

   environment "RADAR_JDBC_URL", "$RADAR_JDBC_URL"
   environment "RADAR_JDBC_USERNAME", "$RADAR_JDBC_USERNAME"
   environment "RADAR_JDBC_PASSWORD", "$RADAR_JDBC_PASSWORD"
   environment "RADAR_LISTEN_PORT", "$RADAR_LISTEN_PORT"
}

task prepareDockerBuild(type:Copy, dependsOn: jar){
    doFirst{
        project.mkdir( "$buildDir/docker")
    }
    from "src/docker"
    into "$buildDir/docker"

    from(configurations.docker)

    from( jar.outputs.files.singleFile ){
        //include "${project.name}-${project.version}.jar"
        into "radar"
        rename(".*","radar-standalone.jar")
    }
}

task dockerBuild(type: Exec, dependsOn: prepareDockerBuild) {
    inputs.files configurations.docker.files

    workingDir "$buildDir/docker"
    executable "docker"
    args "build","--tag=cwms-rest-api:"+project.version, "."
}

test {
    useJUnitPlatform()
    jvmArgs += "-DRADAR_JDBC_DRIVER=mocked"
    jvmArgs += "-DRADAR_JDBC_URL=mocked"
    jvmArgs += "-DRADAR_JDBC_USERNAME=mocked"
    jvmArgs += "-DRADAR_JDBC_PASSWORD=mocked"
}